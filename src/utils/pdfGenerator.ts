import jsPDF from 'jspdf'

export interface UserProfile {
  full_name: string
  email: string
  age?: number
  gender?: string
  medical_history?: string
  current_medications?: string
}

export interface ActivityEntry {
  id: string
  date: string
  activity: string
  category: string
  duration: number
  moodBefore: number
  moodAfter: number
  notes: string
}

export interface ReportData {
  userProfile: UserProfile
  activities: ActivityEntry[]
  analysisResults: any
  timestamp: string
}

export const generatePDFReport = async (data: ReportData): Promise<string> => {
  const pdf = new jsPDF()
  let yPosition = 20

  const addText = (text: string, fontSize = 12, style: 'normal' | 'bold' = 'normal') => {
    pdf.setFontSize(fontSize)
    pdf.setFont('helvetica', style)
    pdf.text(text, 20, yPosition)
    yPosition += fontSize === 16 ? 10 : fontSize === 14 ? 8 : 6
  }

  const addSection = (title: string) => {
    yPosition += 10
    addText(title, 14, 'bold')
    yPosition += 5
  }

  const checkPageBreak = () => {
    if (yPosition > 270) {
      pdf.addPage()
      yPosition = 20
    }
  }

  // Header
  addText('MindWell Depression Detection Report', 16, 'bold')
  addText(`Generated: ${data.timestamp}`, 10)
  addText(`Report for: ${data.userProfile.full_name}`, 12)
  
  // Patient Information
  addSection('Patient Information')
  addText(`Name: ${data.userProfile.full_name}`)
  addText(`Email: ${data.userProfile.email}`)
  if (data.userProfile.age) addText(`Age: ${data.userProfile.age}`)
  if (data.userProfile.gender) addText(`Gender: ${data.userProfile.gender}`)
  
  checkPageBreak()

  // Medical History
  if (data.userProfile.medical_history) {
    addSection('Medical History')
    const historyLines = data.userProfile.medical_history.split('\n')
    historyLines.forEach(line => {
      if (line.trim()) {
        addText(`• ${line.trim()}`)
        checkPageBreak()
      }
    })
  }

  // Current Medications
  if (data.userProfile.current_medications) {
    addSection('Current Medications')
    const medicationLines = data.userProfile.current_medications.split('\n')
    medicationLines.forEach(line => {
      if (line.trim()) {
        addText(`• ${line.trim()}`)
        checkPageBreak()
      }
    })
  }

  // Analysis Results
  if (data.analysisResults) {
    addSection('Analysis Results')
    addText(`Diagnosis Risk: ${data.analysisResults.diagnosisRisk}`)
    addText(`Risk Level: ${data.analysisResults.riskLevel}%`)
    addText(`Confidence: ${data.analysisResults.confidence}%`)
    
    checkPageBreak()

    addText('Key Biomarkers:', 12, 'bold')
    data.analysisResults.keyBiomarkers?.forEach((marker: any) => {
      addText(`• ${marker.name}: ${marker.level} (${marker.result})`)
      checkPageBreak()
    })

    checkPageBreak()

    addText('Metabolomic Insights:', 12, 'bold')
    data.analysisResults.metabolomicsInsights?.forEach((insight: string) => {
      addText(`• ${insight}`)
      checkPageBreak()
    })
  }

  // Activity Tracking Summary
  if (data.activities && data.activities.length > 0) {
    addSection('Activity Tracking Summary')
    addText(`Total Activities Logged: ${data.activities.length}`)
    
    const avgMoodImprovement = data.activities.reduce((sum, activity) => 
      sum + (activity.moodAfter - activity.moodBefore), 0) / data.activities.length
    addText(`Average Mood Improvement: +${avgMoodImprovement.toFixed(1)}`)
    
    checkPageBreak()

    addText('Recent Activities:', 12, 'bold')
    data.activities.slice(0, 10).forEach((activity) => {
      addText(`${activity.date}: ${activity.activity}`)
      addText(`  Category: ${activity.category}, Duration: ${activity.duration}min`)
      addText(`  Mood: ${activity.moodBefore} → ${activity.moodAfter} (${activity.moodAfter > activity.moodBefore ? '+' : ''}${activity.moodAfter - activity.moodBefore})`)
      if (activity.notes) {
        addText(`  Notes: "${activity.notes}"`)
      }
      yPosition += 3
      checkPageBreak()
    })
  }

  // Footer
  checkPageBreak()
  yPosition += 20
  addText('This report is for screening purposes only. Please consult with a healthcare professional for proper diagnosis and treatment.', 10)
  addText('Generated by MindWell Depression Detection Platform', 8)

  // Return base64 encoded PDF
  return pdf.output('datauristring').split(',')[1]
}